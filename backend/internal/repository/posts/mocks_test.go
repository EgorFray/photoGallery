// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository

import (
	"gallery/backend/internal/types"

	mock "github.com/stretchr/testify/mock"
)

// NewMockPostRepositoryInterface creates a new instance of MockPostRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostRepositoryInterface {
	mock := &MockPostRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPostRepositoryInterface is an autogenerated mock type for the PostRepositoryInterface type
type MockPostRepositoryInterface struct {
	mock.Mock
}

type MockPostRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostRepositoryInterface) EXPECT() *MockPostRepositoryInterface_Expecter {
	return &MockPostRepositoryInterface_Expecter{mock: &_m.Mock}
}

// DbCallCreatePost provides a mock function for the type MockPostRepositoryInterface
func (_mock *MockPostRepositoryInterface) DbCallCreatePost(imagePath string, description string, userId string) (int64, error) {
	ret := _mock.Called(imagePath, description, userId)

	if len(ret) == 0 {
		panic("no return value specified for DbCallCreatePost")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string) (int64, error)); ok {
		return returnFunc(imagePath, description, userId)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string) int64); ok {
		r0 = returnFunc(imagePath, description, userId)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = returnFunc(imagePath, description, userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostRepositoryInterface_DbCallCreatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DbCallCreatePost'
type MockPostRepositoryInterface_DbCallCreatePost_Call struct {
	*mock.Call
}

// DbCallCreatePost is a helper method to define mock.On call
//   - imagePath string
//   - description string
//   - userId string
func (_e *MockPostRepositoryInterface_Expecter) DbCallCreatePost(imagePath interface{}, description interface{}, userId interface{}) *MockPostRepositoryInterface_DbCallCreatePost_Call {
	return &MockPostRepositoryInterface_DbCallCreatePost_Call{Call: _e.mock.On("DbCallCreatePost", imagePath, description, userId)}
}

func (_c *MockPostRepositoryInterface_DbCallCreatePost_Call) Run(run func(imagePath string, description string, userId string)) *MockPostRepositoryInterface_DbCallCreatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPostRepositoryInterface_DbCallCreatePost_Call) Return(n int64, err error) *MockPostRepositoryInterface_DbCallCreatePost_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockPostRepositoryInterface_DbCallCreatePost_Call) RunAndReturn(run func(imagePath string, description string, userId string) (int64, error)) *MockPostRepositoryInterface_DbCallCreatePost_Call {
	_c.Call.Return(run)
	return _c
}

// DbCallDeletePost provides a mock function for the type MockPostRepositoryInterface
func (_mock *MockPostRepositoryInterface) DbCallDeletePost(id int, userId string) error {
	ret := _mock.Called(id, userId)

	if len(ret) == 0 {
		panic("no return value specified for DbCallDeletePost")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = returnFunc(id, userId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPostRepositoryInterface_DbCallDeletePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DbCallDeletePost'
type MockPostRepositoryInterface_DbCallDeletePost_Call struct {
	*mock.Call
}

// DbCallDeletePost is a helper method to define mock.On call
//   - id int
//   - userId string
func (_e *MockPostRepositoryInterface_Expecter) DbCallDeletePost(id interface{}, userId interface{}) *MockPostRepositoryInterface_DbCallDeletePost_Call {
	return &MockPostRepositoryInterface_DbCallDeletePost_Call{Call: _e.mock.On("DbCallDeletePost", id, userId)}
}

func (_c *MockPostRepositoryInterface_DbCallDeletePost_Call) Run(run func(id int, userId string)) *MockPostRepositoryInterface_DbCallDeletePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPostRepositoryInterface_DbCallDeletePost_Call) Return(err error) *MockPostRepositoryInterface_DbCallDeletePost_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPostRepositoryInterface_DbCallDeletePost_Call) RunAndReturn(run func(id int, userId string) error) *MockPostRepositoryInterface_DbCallDeletePost_Call {
	_c.Call.Return(run)
	return _c
}

// DbCallGetCreatedPost provides a mock function for the type MockPostRepositoryInterface
func (_mock *MockPostRepositoryInterface) DbCallGetCreatedPost(insertedID int64, userId string) (types.PostModel, error) {
	ret := _mock.Called(insertedID, userId)

	if len(ret) == 0 {
		panic("no return value specified for DbCallGetCreatedPost")
	}

	var r0 types.PostModel
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int64, string) (types.PostModel, error)); ok {
		return returnFunc(insertedID, userId)
	}
	if returnFunc, ok := ret.Get(0).(func(int64, string) types.PostModel); ok {
		r0 = returnFunc(insertedID, userId)
	} else {
		r0 = ret.Get(0).(types.PostModel)
	}
	if returnFunc, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = returnFunc(insertedID, userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostRepositoryInterface_DbCallGetCreatedPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DbCallGetCreatedPost'
type MockPostRepositoryInterface_DbCallGetCreatedPost_Call struct {
	*mock.Call
}

// DbCallGetCreatedPost is a helper method to define mock.On call
//   - insertedID int64
//   - userId string
func (_e *MockPostRepositoryInterface_Expecter) DbCallGetCreatedPost(insertedID interface{}, userId interface{}) *MockPostRepositoryInterface_DbCallGetCreatedPost_Call {
	return &MockPostRepositoryInterface_DbCallGetCreatedPost_Call{Call: _e.mock.On("DbCallGetCreatedPost", insertedID, userId)}
}

func (_c *MockPostRepositoryInterface_DbCallGetCreatedPost_Call) Run(run func(insertedID int64, userId string)) *MockPostRepositoryInterface_DbCallGetCreatedPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPostRepositoryInterface_DbCallGetCreatedPost_Call) Return(postModel types.PostModel, err error) *MockPostRepositoryInterface_DbCallGetCreatedPost_Call {
	_c.Call.Return(postModel, err)
	return _c
}

func (_c *MockPostRepositoryInterface_DbCallGetCreatedPost_Call) RunAndReturn(run func(insertedID int64, userId string) (types.PostModel, error)) *MockPostRepositoryInterface_DbCallGetCreatedPost_Call {
	_c.Call.Return(run)
	return _c
}

// DbCallGetPostById provides a mock function for the type MockPostRepositoryInterface
func (_mock *MockPostRepositoryInterface) DbCallGetPostById(id int, userId string) (types.PostDetailModel, error) {
	ret := _mock.Called(id, userId)

	if len(ret) == 0 {
		panic("no return value specified for DbCallGetPostById")
	}

	var r0 types.PostDetailModel
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, string) (types.PostDetailModel, error)); ok {
		return returnFunc(id, userId)
	}
	if returnFunc, ok := ret.Get(0).(func(int, string) types.PostDetailModel); ok {
		r0 = returnFunc(id, userId)
	} else {
		r0 = ret.Get(0).(types.PostDetailModel)
	}
	if returnFunc, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = returnFunc(id, userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostRepositoryInterface_DbCallGetPostById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DbCallGetPostById'
type MockPostRepositoryInterface_DbCallGetPostById_Call struct {
	*mock.Call
}

// DbCallGetPostById is a helper method to define mock.On call
//   - id int
//   - userId string
func (_e *MockPostRepositoryInterface_Expecter) DbCallGetPostById(id interface{}, userId interface{}) *MockPostRepositoryInterface_DbCallGetPostById_Call {
	return &MockPostRepositoryInterface_DbCallGetPostById_Call{Call: _e.mock.On("DbCallGetPostById", id, userId)}
}

func (_c *MockPostRepositoryInterface_DbCallGetPostById_Call) Run(run func(id int, userId string)) *MockPostRepositoryInterface_DbCallGetPostById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPostRepositoryInterface_DbCallGetPostById_Call) Return(postDetailModel types.PostDetailModel, err error) *MockPostRepositoryInterface_DbCallGetPostById_Call {
	_c.Call.Return(postDetailModel, err)
	return _c
}

func (_c *MockPostRepositoryInterface_DbCallGetPostById_Call) RunAndReturn(run func(id int, userId string) (types.PostDetailModel, error)) *MockPostRepositoryInterface_DbCallGetPostById_Call {
	_c.Call.Return(run)
	return _c
}

// DbCallGetPosts provides a mock function for the type MockPostRepositoryInterface
func (_mock *MockPostRepositoryInterface) DbCallGetPosts(userId string) ([]types.PostModel, error) {
	ret := _mock.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for DbCallGetPosts")
	}

	var r0 []types.PostModel
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]types.PostModel, error)); ok {
		return returnFunc(userId)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []types.PostModel); ok {
		r0 = returnFunc(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.PostModel)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostRepositoryInterface_DbCallGetPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DbCallGetPosts'
type MockPostRepositoryInterface_DbCallGetPosts_Call struct {
	*mock.Call
}

// DbCallGetPosts is a helper method to define mock.On call
//   - userId string
func (_e *MockPostRepositoryInterface_Expecter) DbCallGetPosts(userId interface{}) *MockPostRepositoryInterface_DbCallGetPosts_Call {
	return &MockPostRepositoryInterface_DbCallGetPosts_Call{Call: _e.mock.On("DbCallGetPosts", userId)}
}

func (_c *MockPostRepositoryInterface_DbCallGetPosts_Call) Run(run func(userId string)) *MockPostRepositoryInterface_DbCallGetPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPostRepositoryInterface_DbCallGetPosts_Call) Return(postModels []types.PostModel, err error) *MockPostRepositoryInterface_DbCallGetPosts_Call {
	_c.Call.Return(postModels, err)
	return _c
}

func (_c *MockPostRepositoryInterface_DbCallGetPosts_Call) RunAndReturn(run func(userId string) ([]types.PostModel, error)) *MockPostRepositoryInterface_DbCallGetPosts_Call {
	_c.Call.Return(run)
	return _c
}

// DbCallSearchPosts provides a mock function for the type MockPostRepositoryInterface
func (_mock *MockPostRepositoryInterface) DbCallSearchPosts(queryUrl string, userId string) ([]types.PostModel, error) {
	ret := _mock.Called(queryUrl, userId)

	if len(ret) == 0 {
		panic("no return value specified for DbCallSearchPosts")
	}

	var r0 []types.PostModel
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) ([]types.PostModel, error)); ok {
		return returnFunc(queryUrl, userId)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) []types.PostModel); ok {
		r0 = returnFunc(queryUrl, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.PostModel)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(queryUrl, userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostRepositoryInterface_DbCallSearchPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DbCallSearchPosts'
type MockPostRepositoryInterface_DbCallSearchPosts_Call struct {
	*mock.Call
}

// DbCallSearchPosts is a helper method to define mock.On call
//   - queryUrl string
//   - userId string
func (_e *MockPostRepositoryInterface_Expecter) DbCallSearchPosts(queryUrl interface{}, userId interface{}) *MockPostRepositoryInterface_DbCallSearchPosts_Call {
	return &MockPostRepositoryInterface_DbCallSearchPosts_Call{Call: _e.mock.On("DbCallSearchPosts", queryUrl, userId)}
}

func (_c *MockPostRepositoryInterface_DbCallSearchPosts_Call) Run(run func(queryUrl string, userId string)) *MockPostRepositoryInterface_DbCallSearchPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPostRepositoryInterface_DbCallSearchPosts_Call) Return(postModels []types.PostModel, err error) *MockPostRepositoryInterface_DbCallSearchPosts_Call {
	_c.Call.Return(postModels, err)
	return _c
}

func (_c *MockPostRepositoryInterface_DbCallSearchPosts_Call) RunAndReturn(run func(queryUrl string, userId string) ([]types.PostModel, error)) *MockPostRepositoryInterface_DbCallSearchPosts_Call {
	_c.Call.Return(run)
	return _c
}
