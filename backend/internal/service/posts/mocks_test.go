// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package posts

import (
	"gallery/backend/internal/types"
	"mime/multipart"

	mock "github.com/stretchr/testify/mock"
)

// NewMockPostServiceInterface creates a new instance of MockPostServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostServiceInterface {
	mock := &MockPostServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPostServiceInterface is an autogenerated mock type for the PostServiceInterface type
type MockPostServiceInterface struct {
	mock.Mock
}

type MockPostServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostServiceInterface) EXPECT() *MockPostServiceInterface_Expecter {
	return &MockPostServiceInterface_Expecter{mock: &_m.Mock}
}

// CreatePost provides a mock function for the type MockPostServiceInterface
func (_mock *MockPostServiceInterface) CreatePost(file *multipart.FileHeader, description string, userId string) (*types.PostModel, error) {
	ret := _mock.Called(file, description, userId)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 *types.PostModel
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*multipart.FileHeader, string, string) (*types.PostModel, error)); ok {
		return returnFunc(file, description, userId)
	}
	if returnFunc, ok := ret.Get(0).(func(*multipart.FileHeader, string, string) *types.PostModel); ok {
		r0 = returnFunc(file, description, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.PostModel)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*multipart.FileHeader, string, string) error); ok {
		r1 = returnFunc(file, description, userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostServiceInterface_CreatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePost'
type MockPostServiceInterface_CreatePost_Call struct {
	*mock.Call
}

// CreatePost is a helper method to define mock.On call
//   - file *multipart.FileHeader
//   - description string
//   - userId string
func (_e *MockPostServiceInterface_Expecter) CreatePost(file interface{}, description interface{}, userId interface{}) *MockPostServiceInterface_CreatePost_Call {
	return &MockPostServiceInterface_CreatePost_Call{Call: _e.mock.On("CreatePost", file, description, userId)}
}

func (_c *MockPostServiceInterface_CreatePost_Call) Run(run func(file *multipart.FileHeader, description string, userId string)) *MockPostServiceInterface_CreatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *multipart.FileHeader
		if args[0] != nil {
			arg0 = args[0].(*multipart.FileHeader)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPostServiceInterface_CreatePost_Call) Return(postModel *types.PostModel, err error) *MockPostServiceInterface_CreatePost_Call {
	_c.Call.Return(postModel, err)
	return _c
}

func (_c *MockPostServiceInterface_CreatePost_Call) RunAndReturn(run func(file *multipart.FileHeader, description string, userId string) (*types.PostModel, error)) *MockPostServiceInterface_CreatePost_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePost provides a mock function for the type MockPostServiceInterface
func (_mock *MockPostServiceInterface) DeletePost(id int, userId string) error {
	ret := _mock.Called(id, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = returnFunc(id, userId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPostServiceInterface_DeletePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePost'
type MockPostServiceInterface_DeletePost_Call struct {
	*mock.Call
}

// DeletePost is a helper method to define mock.On call
//   - id int
//   - userId string
func (_e *MockPostServiceInterface_Expecter) DeletePost(id interface{}, userId interface{}) *MockPostServiceInterface_DeletePost_Call {
	return &MockPostServiceInterface_DeletePost_Call{Call: _e.mock.On("DeletePost", id, userId)}
}

func (_c *MockPostServiceInterface_DeletePost_Call) Run(run func(id int, userId string)) *MockPostServiceInterface_DeletePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPostServiceInterface_DeletePost_Call) Return(err error) *MockPostServiceInterface_DeletePost_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPostServiceInterface_DeletePost_Call) RunAndReturn(run func(id int, userId string) error) *MockPostServiceInterface_DeletePost_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostById provides a mock function for the type MockPostServiceInterface
func (_mock *MockPostServiceInterface) GetPostById(id int, userId string) (*types.PostDetailModel, error) {
	ret := _mock.Called(id, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetPostById")
	}

	var r0 *types.PostDetailModel
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, string) (*types.PostDetailModel, error)); ok {
		return returnFunc(id, userId)
	}
	if returnFunc, ok := ret.Get(0).(func(int, string) *types.PostDetailModel); ok {
		r0 = returnFunc(id, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.PostDetailModel)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = returnFunc(id, userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostServiceInterface_GetPostById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostById'
type MockPostServiceInterface_GetPostById_Call struct {
	*mock.Call
}

// GetPostById is a helper method to define mock.On call
//   - id int
//   - userId string
func (_e *MockPostServiceInterface_Expecter) GetPostById(id interface{}, userId interface{}) *MockPostServiceInterface_GetPostById_Call {
	return &MockPostServiceInterface_GetPostById_Call{Call: _e.mock.On("GetPostById", id, userId)}
}

func (_c *MockPostServiceInterface_GetPostById_Call) Run(run func(id int, userId string)) *MockPostServiceInterface_GetPostById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPostServiceInterface_GetPostById_Call) Return(postDetailModel *types.PostDetailModel, err error) *MockPostServiceInterface_GetPostById_Call {
	_c.Call.Return(postDetailModel, err)
	return _c
}

func (_c *MockPostServiceInterface_GetPostById_Call) RunAndReturn(run func(id int, userId string) (*types.PostDetailModel, error)) *MockPostServiceInterface_GetPostById_Call {
	_c.Call.Return(run)
	return _c
}

// GetPosts provides a mock function for the type MockPostServiceInterface
func (_mock *MockPostServiceInterface) GetPosts(userId string) ([]types.PostModel, error) {
	ret := _mock.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetPosts")
	}

	var r0 []types.PostModel
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]types.PostModel, error)); ok {
		return returnFunc(userId)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []types.PostModel); ok {
		r0 = returnFunc(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.PostModel)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostServiceInterface_GetPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPosts'
type MockPostServiceInterface_GetPosts_Call struct {
	*mock.Call
}

// GetPosts is a helper method to define mock.On call
//   - userId string
func (_e *MockPostServiceInterface_Expecter) GetPosts(userId interface{}) *MockPostServiceInterface_GetPosts_Call {
	return &MockPostServiceInterface_GetPosts_Call{Call: _e.mock.On("GetPosts", userId)}
}

func (_c *MockPostServiceInterface_GetPosts_Call) Run(run func(userId string)) *MockPostServiceInterface_GetPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPostServiceInterface_GetPosts_Call) Return(postModels []types.PostModel, err error) *MockPostServiceInterface_GetPosts_Call {
	_c.Call.Return(postModels, err)
	return _c
}

func (_c *MockPostServiceInterface_GetPosts_Call) RunAndReturn(run func(userId string) ([]types.PostModel, error)) *MockPostServiceInterface_GetPosts_Call {
	_c.Call.Return(run)
	return _c
}

// SearchPosts provides a mock function for the type MockPostServiceInterface
func (_mock *MockPostServiceInterface) SearchPosts(queryUrl string, userId string) ([]types.PostModel, error) {
	ret := _mock.Called(queryUrl, userId)

	if len(ret) == 0 {
		panic("no return value specified for SearchPosts")
	}

	var r0 []types.PostModel
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) ([]types.PostModel, error)); ok {
		return returnFunc(queryUrl, userId)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) []types.PostModel); ok {
		r0 = returnFunc(queryUrl, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.PostModel)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(queryUrl, userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostServiceInterface_SearchPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchPosts'
type MockPostServiceInterface_SearchPosts_Call struct {
	*mock.Call
}

// SearchPosts is a helper method to define mock.On call
//   - queryUrl string
//   - userId string
func (_e *MockPostServiceInterface_Expecter) SearchPosts(queryUrl interface{}, userId interface{}) *MockPostServiceInterface_SearchPosts_Call {
	return &MockPostServiceInterface_SearchPosts_Call{Call: _e.mock.On("SearchPosts", queryUrl, userId)}
}

func (_c *MockPostServiceInterface_SearchPosts_Call) Run(run func(queryUrl string, userId string)) *MockPostServiceInterface_SearchPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPostServiceInterface_SearchPosts_Call) Return(postModels []types.PostModel, err error) *MockPostServiceInterface_SearchPosts_Call {
	_c.Call.Return(postModels, err)
	return _c
}

func (_c *MockPostServiceInterface_SearchPosts_Call) RunAndReturn(run func(queryUrl string, userId string) ([]types.PostModel, error)) *MockPostServiceInterface_SearchPosts_Call {
	_c.Call.Return(run)
	return _c
}
