// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package user

import (
	"gallery/backend/internal/types"
	"mime/multipart"

	mock "github.com/stretchr/testify/mock"
)

// NewMockUserServiceInterface creates a new instance of MockUserServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserServiceInterface {
	mock := &MockUserServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserServiceInterface is an autogenerated mock type for the UserServiceInterface type
type MockUserServiceInterface struct {
	mock.Mock
}

type MockUserServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserServiceInterface) EXPECT() *MockUserServiceInterface_Expecter {
	return &MockUserServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockUserServiceInterface
func (_mock *MockUserServiceInterface) CreateUser(req types.UserRequest, hashedPassword string, file *multipart.FileHeader) (*int, error) {
	ret := _mock.Called(req, hashedPassword, file)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(types.UserRequest, string, *multipart.FileHeader) (*int, error)); ok {
		return returnFunc(req, hashedPassword, file)
	}
	if returnFunc, ok := ret.Get(0).(func(types.UserRequest, string, *multipart.FileHeader) *int); ok {
		r0 = returnFunc(req, hashedPassword, file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(types.UserRequest, string, *multipart.FileHeader) error); ok {
		r1 = returnFunc(req, hashedPassword, file)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserServiceInterface_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserServiceInterface_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - req types.UserRequest
//   - hashedPassword string
//   - file *multipart.FileHeader
func (_e *MockUserServiceInterface_Expecter) CreateUser(req interface{}, hashedPassword interface{}, file interface{}) *MockUserServiceInterface_CreateUser_Call {
	return &MockUserServiceInterface_CreateUser_Call{Call: _e.mock.On("CreateUser", req, hashedPassword, file)}
}

func (_c *MockUserServiceInterface_CreateUser_Call) Run(run func(req types.UserRequest, hashedPassword string, file *multipart.FileHeader)) *MockUserServiceInterface_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.UserRequest
		if args[0] != nil {
			arg0 = args[0].(types.UserRequest)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *multipart.FileHeader
		if args[2] != nil {
			arg2 = args[2].(*multipart.FileHeader)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserServiceInterface_CreateUser_Call) Return(n *int, err error) *MockUserServiceInterface_CreateUser_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockUserServiceInterface_CreateUser_Call) RunAndReturn(run func(req types.UserRequest, hashedPassword string, file *multipart.FileHeader) (*int, error)) *MockUserServiceInterface_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function for the type MockUserServiceInterface
func (_mock *MockUserServiceInterface) GetUserByEmail(email string) (*types.UserModel, error) {
	ret := _mock.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *types.UserModel
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*types.UserModel, error)); ok {
		return returnFunc(email)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *types.UserModel); ok {
		r0 = returnFunc(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.UserModel)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserServiceInterface_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockUserServiceInterface_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - email string
func (_e *MockUserServiceInterface_Expecter) GetUserByEmail(email interface{}) *MockUserServiceInterface_GetUserByEmail_Call {
	return &MockUserServiceInterface_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", email)}
}

func (_c *MockUserServiceInterface_GetUserByEmail_Call) Run(run func(email string)) *MockUserServiceInterface_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserServiceInterface_GetUserByEmail_Call) Return(userModel *types.UserModel, err error) *MockUserServiceInterface_GetUserByEmail_Call {
	_c.Call.Return(userModel, err)
	return _c
}

func (_c *MockUserServiceInterface_GetUserByEmail_Call) RunAndReturn(run func(email string) (*types.UserModel, error)) *MockUserServiceInterface_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}
